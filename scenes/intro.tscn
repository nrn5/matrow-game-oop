[gd_scene load_steps=14 format=3 uid="uid://yv6tx3d7fj3b"]

[ext_resource type="PackedScene" uid="uid://tgjdsvt30gt7" path="res://blender/deadTree01.dae" id="2_6yxbl"]
[ext_resource type="Texture2D" uid="uid://ddl4hn6lw2fra" path="res://textures/burned_ground_01/burned_ground_01_diff_4k.jpg" id="2_w5qgk"]
[ext_resource type="Texture2D" uid="uid://dh7jpxsfpyd3x" path="res://textures/burned_ground_01/burned_ground_01_nor_gl_4k.jpg" id="3_d53cl"]
[ext_resource type="Texture2D" uid="uid://dfx0pxkjs6pr4" path="res://textures/burned_ground_01/burned_ground_01_rough_4k.jpg" id="4_fij52"]
[ext_resource type="PackedScene" uid="uid://dgphceem3w1tt" path="res://blender/main_char_anim.glb" id="5_nh0yb"]

[sub_resource type="Shader" id="Shader_jrvam"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	COLOR = mix(ground, sky, step(0.0, EYEDIR.y));
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pe8x2"]
shader = SubResource("Shader_jrvam")
shader_parameter/sky_top_color = Color(0.109804, 0.0745098, 0.0352941, 1)
shader_parameter/sky_horizon_color = Color(0.152941, 0.109804, 0.0705882, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(0.0666667, 0.12549, 0.0588235, 1)
shader_parameter/ground_bottom_color = Color(0.141176, 0.0784314, 0, 1)
shader_parameter/ground_horizon_color = Color(0.152941, 0.109804, 0.0705882, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15

[sub_resource type="Sky" id="Sky_k0e3x"]
sky_material = SubResource("ShaderMaterial_pe8x2")

[sub_resource type="Environment" id="Environment_ioybd"]
background_mode = 2
sky = SubResource("Sky_k0e3x")
ambient_light_source = 3
reflected_light_source = 2
volumetric_fog_enabled = true
volumetric_fog_density = 0.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_tc2ad"]
albedo_texture = ExtResource("2_w5qgk")
roughness_texture = ExtResource("4_fij52")
normal_enabled = true
normal_scale = -4.9
normal_texture = ExtResource("3_d53cl")
uv1_scale = Vector3(30, 30, 30)

[sub_resource type="BoxMesh" id="BoxMesh_4f0or"]
material = SubResource("StandardMaterial3D_tc2ad")
size = Vector3(50, 0.5, 50)

[sub_resource type="BoxShape3D" id="BoxShape3D_6dlv3"]
size = Vector3(50, 0.5, 50)

[sub_resource type="FogMaterial" id="FogMaterial_xas3i"]
albedo = Color(0.243137, 0.0941176, 0.0431373, 1)
emission = Color(0.152941, 0.0509804, 0.0117647, 1)

[node name="introScene" type="Node3D"]

[node name="sky" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_ioybd")

[node name="world" type="Node3D" parent="."]
transform = Transform3D(3, 0, 0, 0, 1.628, 0, 0, 0, 2.48164, 0, 0, 0)

[node name="trees" type="Node3D" parent="world"]
transform = Transform3D(0.333333, 0, 0, 0, 0.614251, 0, 0, 0, 0.402959, 0, 0, 0)

[node name="deadTree01" parent="world/trees" instance=ExtResource("2_6yxbl")]
transform = Transform3D(9.66103, 0, 0, 0, 8.93492, 0, 0, 0, 6.23628, -8.64632, 0.250004, -10.5547)

[node name="deadTree02" parent="world/trees" instance=ExtResource("2_6yxbl")]
transform = Transform3D(9.66103, 0, 0, 0, 8.93492, 0, 0, 0, 6.23628, 34.9884, 0.250004, -32.5267)

[node name="deadTree03" parent="world/trees" instance=ExtResource("2_6yxbl")]
transform = Transform3D(9.66103, 0, 0, 0, 8.93492, 0, 0, 0, 6.23628, -8.64632, 0.250004, -37.407)

[node name="deadTree04" parent="world/trees" instance=ExtResource("2_6yxbl")]
transform = Transform3D(9.66103, 0, 0, 0, 8.93492, 0, 0, 0, 6.23628, -27.3084, 0.250004, -22.8482)

[node name="deadTree05" parent="world/trees" instance=ExtResource("2_6yxbl")]
transform = Transform3D(9.66103, 0, 0, 0, 8.93492, 0, 0, 0, 6.23628, -8.6683, 0.250004, 23.1962)

[node name="floor" type="StaticBody3D" parent="world"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
metadata/_edit_group_ = true

[node name="MeshInstance3D" type="MeshInstance3D" parent="world/floor"]
mesh = SubResource("BoxMesh_4f0or")

[node name="CollisionShape3D" type="CollisionShape3D" parent="world/floor"]
shape = SubResource("BoxShape3D_6dlv3")

[node name="FogVolume" type="FogVolume" parent="."]
transform = Transform3D(1, 0, 0, 0, 7.50682, 0, 0, 0, 1, 5, 2, 1.185)
visible = false
size = Vector3(100, 1, 100)
material = SubResource("FogMaterial_xas3i")

[node name="mainchar" parent="." instance=ExtResource("5_nh0yb")]
transform = Transform3D(3.5, 0, 0, 0, 3.5, 0, 0, 0, 3.5, 0, 0, 0)

[node name="cutscene" type="AnimationPlayer" parent="."]

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 18.4159, 0)

[editable path="mainchar"]
